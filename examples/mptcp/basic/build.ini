[Config Base_NetPerfMeter]
#############################################################################################
extends = _Base_NetPerfMeter							  #
description = Setup with Bottleneck						          #
#############################################################################################
**.mptcp1.netPerfMeterApp[*].startTime       				= 0.1 s
#**.mptcp1.netPerfMeterApp[*].resetTime       				=  60 s
**.mptcp1.netPerfMeterApp[*].stopTime        				= 300 s
**.mptcp1.netPerfMeterApp[*].connectTime      				= 5 s

**.server1.netPerfMeterApp[*].startTime  		       		= 0.1 s # uniform(0.9s,1.1s)
#**.server1.netPerfMeterApp[*].resetTime         			=  60 s
**.server1.netPerfMeterApp[*].stopTime          			= 360 s
**.server1.netPerfMeterApp[*].connectTime      				= 5 s

[Config Experiment_Bottleneck_CMT_SCTP]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck TCP"														#
#############################################################################################
**.*.netPerfMeterApp[0].protocol      						= "SCTP"
**.*.netPerfMeterApp[1].protocol      						= "SCTP"
**.*.tcp.cmtCCVariant 										= "off"	# true false
**.*.sctp.cmtCCVariant 										= "off"
**.mptcp1.numNetPerfMeterApps              				= 2


[Config Experiment_Bottleneck_MPTCP_TCP]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck TCP"														#
#############################################################################################
**.*.netPerfMeterApp[*].protocol      						= "TCP"
**.*.netPerfMeterApp[*].protocol      						= "TCP"
**.*.tcp.cmtCCVariant 										= "cmt"	# true false
**.*.sctp.cmtCCVariant 										= "cmt"
**.mptcp1.numNetPerfMeterApps              				= 2


[Config Experiment_Bottleneck_SCTP_TCP]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck TCP"														#
#############################################################################################
**.mptcp1.netPerfMeterApp[0].protocol      					= "TCP"
**.server1.netPerfMeterApp[1].protocol      				= "TCP"
**.mptcp1.netPerfMeterApp[0].protocol      				    = "SCTP"
**.server1.netPerfMeterApp[1].protocol     				    = "SCTP"

**.*.tcp.cmtCCVariant 										= "off"	# true false
**.*.sctp.cmtCCVariant 										= "off"    # "cmt"
**.mptcp1.numNetPerfMeterApps              				= 2


[Config Experiment_Bottleneck_SCTP]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck TCP"														#
#############################################################################################
**.*.netPerfMeterApp[0].protocol      						= "SCTP"
**.*.netPerfMeterApp[1].protocol      						= "SCTP"
**.*.tcp.cmtCCVariant 										= "off"
**.*.sctp.cmtCCVariant 										= "off"
**.mptcp1.numNetPerfMeterApps              				= 2

[Config Experiment_Bottleneck_TCP]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck TCP"														#
#############################################################################################
**.*.netPerfMeterApp[0].protocol      						= "TCP"
**.*.netPerfMeterApp[1].protocol      						= "TCP"
**.*.tcp.cmtCCVariant 										= "off"
**.*.sctp.cmtCCVariant 										= "off"
**.mptcp1.numNetPerfMeterApps              				= 2

[Config TCP_Netperfmeter]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck TCP"														#
#############################################################################################
**.*.netPerfMeterApp[*].protocol      						= "TCP"
**.*.sctp.cmtCCVariant 										= "off" # "cmt"
**.*.tcp.cmtCCVariant 										= "off" 	# true false
**.mptcp1.numNetPerfMeterApps              				= 1
**.mptcp1.netPerfMeterApp[*].remotePort   	 				= 8000
**.server1.netPerfMeterApp[*].localPort     				= 8000 #+${server1ID=ancestorIndex(0)}
**.server1.netPerfMeterApp[*].localAddress 	 				= "0.0.0.0"
**.server1.numNetPerfMeterApps              				= 1
**.server1.netPerfMeterApp[*].protocol      				= "TCP"

[Config MPTCP_Netperfmeter_Single]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck SCTP"														#
#############################################################################################
**.*.netPerfMeterApp[*].protocol      						= "TCP"
**.*.sctp.cmtCCVariant 										= "cmt" # "cmt"
**.*.tcp.cmtCCVariant 										= "cmt"	# true false
**.mptcp1.numNetPerfMeterApps              					= 1
**.mptcp1.netPerfMeterApp[*].remotePort   	 				= 8000
**.server1.netPerfMeterApp[*].localPort     				= 8000+${server1ID=ancestorIndex(0)}
**.server1.netPerfMeterApp[*].localAddress 	 				= "0.0.0.0"
**.server1.numNetPerfMeterApps              				= 1
**.server1.netPerfMeterApp[*].protocol      				= "TCP"

[Config CMT_Netperfmeter_Multi]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck SCTP"														#
#############################################################################################
**.*.netPerfMeterApp[*].protocol      						= "SCTP"
**.*.sctp.cmtCCVariant 										= "cmt" # "cmt"
**.*.tcp.cmtCCVariant 										= "cmt"
**.mptcp1.numNetPerfMeterApps              				= 1
**.mptcp1.numNetPerfMeterApps              				= 0
**.mptcp1.netPerfMeterApp[*].remotePort   	 				= 8000
**.server1.netPerfMeterApp[*].localPort     				= 8000+${server1ID=ancestorIndex(0)}
**.server1.netPerfMeterApp[*].localAddress 	 				= "0.0.0.0"
**.server1.numNetPerfMeterApps              				= 1
**.server1.netPerfMeterApp[*].protocol      				= "SCTP"

[Config CMT_Netperfmeter_Single]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck SCTP"														#
#############################################################################################
**.*.netPerfMeterApp[*].protocol      						= "SCTP"
**.*.sctp.cmtCCVariant 										= "cmt" # "cmt"
**.*.tcp.cmtCCVariant 										= "cmt"
**.mptcp1.numNetPerfMeterApps              				= 1
**.mptcp1.netPerfMeterApp[*].remotePort   	 				= 8000
**.server1.netPerfMeterApp[*].localPort     				= 8000+${server1ID=ancestorIndex(0)}
**.server1.netPerfMeterApp[*].localAddress 	 				= "0.0.0.0"
**.server1.numNetPerfMeterApps              				= 1
**.server1.netPerfMeterApp[*].protocol      				= "SCTP"

[Config SCTP_Netperfmeter]
#############################################################################################
extends = Base_NetPerfMeter																#
description = "Setup with Bottleneck SCTP"														#
#############################################################################################
**.*.netPerfMeterApp[*].protocol      						= "SCTP"
**.*.sctp.cmtCCVariant 										= "off" # "cmt"
**.*.tcp.cmtCCVariant 										= "off"
**.mptcp1.numNetPerfMeterApps              				= 1
**.mptcp1.netPerfMeterApp[*].remotePort   	 				= 8000
**.server1.netPerfMeterApp[*].localPort     				= 8000 #+${server1ID=ancestorIndex(0)}
**.server1.netPerfMeterApp[*].localAddress 	 				= "0.0.0.0"
**.server1.numNetPerfMeterApps              				= 1
**.server1.netPerfMeterApp[*].protocol      				= "SCTP"

#**.default1*.netPerfMeter[*].startTime       				= 1.1 s #uniform(0.9s,1.1s) -
#**.mptcp*.netPerfMeter[*].startTime       					= 1.0 s # uniform(0.9s,1.1s)


## Config Base_NetPerfMeter wil be written by check_build sh 
[Config _Base_NetPerfMeter]
#############################################################################################
extends = Default_NetPerfMeter 								    # 
description = "Setup with Bottleneck" #
#############################################################################################



#############################################################################################
[Config Default_NetPerfMeter]																#
description = "MPTCP Default with netPerfMeterApp"												#
#############################################################################################
## Nothing special, just one server1 and one mptcp client
#############################################################################################

## Common network settings
#############################################################################################
## SET MTU of PPP
**.*.ppp[*].ppp.mtu = 1500 B

#############################################################################################
## Topology Settings
#############################################################################################

## Router
#############################################################################################
# **.server1*.ppp[0].ppp.mtu             = 1500	# individual configuration

## Router Queues
#############################################################################################
## RED Queue (New 2013)
#**.router*.ppp[*].queueType 							= "DSQueue2"
#**.router*.ppp[*].queue.beQueue.frameCapacity 			=  100	# 1Mbit = 9; 10 Mbit = 84; 100 Mbit 844
#**.router*.ppp[*].queue.red.minths 					= "30"
#**.router*.ppp[*].queue.red.maxths 					= "90"
#**.router*.ppp[*].queue.red.maxps 						= "0.1"
#**.router*.ppp[*].queue.wrr.weights 					= "1 1"


## RED Queue
# **.router*.ppp[*].queueType           = "REDQueue"
# **.router*.ppp[*].queue.wq            = 0.002
# **.router*.ppp[*].queue.red.minths    = "20"
# **.router*.ppp[*].queue.red.maxths    = "80"
# **.router*.ppp[*].queue.red.maxps     = "0.02"
# **.router*.ppp[*].queue.red.pkrates   = "83" # "833" 

## FIFI QUEUE
**.router*.ppp[*].queueType = "DropTailQueue" # in routers
**.router*.ppp[*].queue.frameCapacity = 250000    # in routers 

## server1
#############################################################################################
## netPerfMeterApp Passive Node
**.server*.netPerfMeterApp[*].activeMode        		= false

**.server*.netPerfMeterApp[*].queueSize         		= 5e+06 B # Think on arcwnd -> see TCP
#**.server1*.netPerfMeterApp[*].unordered         		= 1
#**.server1*.netPerfMeterApp[*].unreliable        		= 0
#**.server1*.netPerfMeterApp[*].maxInboundStreams 		= 16
**.server*.netPerfMeterApp[*].frameRate         		= 0 Hz
**.server*.netPerfMeterApp[*].frameSize         		= 1424 B
**.server*.netPerfMeterApp[*].frameRateString  	 		= ""
**.server*.netPerfMeterApp[*].frameSizeString   		= ""
# Be careful 1456 - 32 
**.server*.netPerfMeterApp[*].maxMsgSize        		= 1424 B	# (options = 32)

## mptcp client
#############################################################################################
## netPerfMeterApp Active Node
**.mptcp*.netPerfMeterApp[*].activeMode      			= true
**.mptcp*.netPerfMeterApp[*].queueSize      	 		= 5e+06 B  # 5e+06 B (5000000b) | 250000 B
#**.mptcp*.netPerfMeterApp[*].unordered       			= 1
#**.mptcp*.netPerfMeterApp[*].unreliable      			= 0
#**.mptcp*.netPerfMeterApp[*].outboundStreams 			= 1
#**.mptcp*.netPerfMeterApp[*].maxMsgSize     			= 1452 B
# Be careful 1456 - 32 
**.mptcp*.netPerfMeterApp[*].maxMsgSize      			= 1424 B #  (options = 32)
**.mptcp*.netPerfMeterApp[*].frameRate       			= 0 Hz
**.mptcp*.netPerfMeterApp[*].frameSize       			= 1424 B
# Be careful 1456 - 32 
**.mptcp*.netPerfMeterApp[*].frameRateString			= ""
**.mptcp*.netPerfMeterApp[*].frameSizeString			= ""
**.mptcp*.netPerfMeterApp[*].onTime         			= -1s
**.mptcp*.netPerfMeterApp[*].offTime        			= -1s
**.mptcp*.netPerfMeterApp[*].maxReconnects  			= 0



## Common connection setup
#############################################################################################


**.mptcp1.netPerfMeterApp[*].localAddress  				= "10.1.1.1"
**.mptcp1.netPerfMeterApp[*].remoteAddress 				= "10.1.1.2" 
## Alternative Route
#**.mptcp1.netPerfMeterApp[*].localAddress  			= "10.2.3.1"
#**.mptcp1.netPerfMeterApp[*].remoteAddress 			= "10.2.4.2"
##**.mptcp*.netPerfMeterApp[*].primaryPath   = "MPTCPTestNetwork.server1Main[" + string(${alphaMainmptcpID}) + "]/ppp0"
##**.mptcp1.netPerfMeterApp[*].protocol      				= "TCP"


#**.server1.netPerfMeterApp[*].localPort     			= 8000+${server1ID=ancestorIndex(0)}
#**.server1.netPerfMeterApp[*].localAddress 	 			= "0.0.0.0"
#**.server1.numNetPerfMeterApps              			= 1
#**.server1.netPerfMeterApp[*].protocol      			= "TCP"

## Protocols
#############################################################################################

## TCP Parameters
#################################
**.*.tcp.advertisedWindow       						= 5e+06
**.*.tcp.mss                    						= 1456 # 1456	# Alternative 1452
**.*.tcp.tcpAlgorithmClass      						= "TCPNewReno"		# Only TCPReno has Sack Support
#**.*.tcp.sendQueueClass         						= "TCPMsgBasedSendQueue"
#**.*.tcp.receiveQueueClass      						= "TCPMsgBasedRcvQueue"
**.*.tcp.sackSupport            						= false
**.*.tcp.timestampSupport       						= true
**.*.tcp.windowScalingSupport   						= true
**.*.tcp.delayedAcksEnabled     						= false
**.*.tcp.limitedTransmitEnabled 						= false
**.*.tcp.increasedIWEnabled     						= false
**.*.tcp.nagleEnabled									= true
**.*.tcp.recordStats									= true

# MPTCP Client
#################################

**.mptcp1.tcp.multipath_DSSSeqNo8   					= false
**.mptcp1.tcp.multipath_DSSDataACK8 					= false
**.mptcp1.tcp.multipath_ordered 						= true # only for test 
**.mptcp1.tcp.multipath_Scheduler 						= "MPTCP_RoundRobinScheduler"
#**.mptcp1*.tcp.multipath_receiveQueueClass 				= "TCPMultipathMsgBasedRcvQueue"

# MPTCP Server
#################################

**.server1.tcp.multipath_DSSSeqNo8   					= false
**.server1.tcp.multipath_DSSDataACK8 					= false
**.server1.tcp.multipath_ordered 						= true # only for test 
**.server1.tcp.multipath_Scheduler 					= "MPTCP_RoundRobinScheduler"
#**.server1*.tcp.multipath_receiveQueueClass 			= "TCPMultipathMsgBasedRcvQueue"

## IP Parameters
################################# 
**.*.ip.procDelay         								= 10us
**.*.routing.procDelay   			 					= 0.2us
**.*.inputQueue.procDelay 								= 0.1us

## SCTP Parameter
#################################
**.*.sctp.arwnd 										= 5e+05
**.*.sctp.sendQueueLimit								= 500000 		
**.*.sctp.cmtSendAllVariant 							= "smallestLastTransmission"
**.*.sctp.cmtRetransmissionVariant 						= "normal"
**.*.sctp.cmtBufferSplitVariant 						= "bothSides"
**.*.sctp.cmtBufferSplittingUsesOSB 					= true
**.*.sctp.cmtCUCVariant 								= "pseudoCumAckV2"
**.*.sctp.cmtUseSFR 									= true
**.*.sctp.cmtUseDAC 									= true
**.*.sctp.cmtUseFRC 									= true
**.*.sctp.cmtCCPathGroups 								= ""
**.*.sctp.cmtSackPath 									= "smallestSRTT"
**.*.sctp.nrSack 										= true
**.*.sctp.disableReneging 								= false
**.*.sctp.gapReportLimit 								= 1e+08
**.*.sctp.gapListOptimizationVariant 					= "none"
**.*.sctp.smartOverfullSACKHandling 					= true
**.*.sctp.cmtUseOOPG 									= false
**.*.sctp.strictCwndBooking 							= false
**.*.sctp.osbWithHeader 								= false
**.*.sctp.sackNow 										= true
**.*.sctp.packetDrop 									= false
**.*.sctp.highSpeedCC 									= false
**.*.sctp.maxBurst 										= 4
**.*.sctp.maxBurstVariant 								= "maxBurst"
**.*.sctp.initialWindow 								= 0
**.*.sctp.cmtSmartT3Reset 								= true
**.*.sctp.cmtSmartReneging 								= true
**.*.sctp.cmtSmartFastRTX 								= true
**.*.sctp.cmtSlowPathRTTUpdate 							= true
**.*.sctp.cmtSendBufferControlVariant 					= "none"
**.*.sctp.cmtSendBufferBlockThreshold 					= 0.5
**.*.sctp.cmtSuspendPathOnBlocking						= false
**.*.sctp.cmtMovedChunksReduceCwnd 						= true
**.*.sctp.movedChunkFastRTXFactor 						= 2
**.*.sctp.streamsToPaths 								= ""
**.*.sctp.RTXMethod 									= 0 # "once"
**.*.sctp.ssModule 										= 0 # "roundRobin"
**.*.sctp.allowQoSTracking 								= false
**.*.sctp.qosTrackingInterval 							= 1 s


[General]
network = basic
total-stack = 36MiB
tkenv-plugin-path = ../../../etc/plugins


###########################################################################################
## Config simulation
rng-class           = cMersenneTwister
seed-0-mt           = 0
# repeat 			= 10		# Repeat runs

output-scalar-file  = scalars.sca
output-vector-file  = vectors.vec

sim-time-limit      = 0s 3600s 1ms
simtime-scale       = -8   # 10ns time scale

cmdenv-express-mode = true     # *** Enable debugging messages here! ***
**.testing          = false    # *** Enable debugging messages here! ***
**.checkQueues      = true     # *** Enable checkOutstandingBytes() calls here! ***

MPTCPTestNetwork.**.vector-recording = true
MPTCPTestNetwork.**.vector-recording-intervals = 0..100 



###########################################################################################
## DEBUG Output 

# Omnet board tools
#debug-on-errors = true
#record-eventlog = true

## Example for basic PCAP step by step configuration
#**.mptcp*.tcpdump.dumpFile="mptcp_Log.pcap"
#**.server1*.tcpdump.dumpFile="server1_Log.pcap"

## Example for general PCAP configuration
## Example for general PCAP configuration (new)
# activate pcap
**.mptcp1.numPcapRecorders = 1
**.server1.numPcapRecorders = 1


# write out pcap
**.mptcp*.pcapRecorder[0].pcapFile  = ${N1=fullPath()}+".pcap"   # *** Enable pcap dump here! ***
**.server1*.pcapRecorder[0].pcapFile  = ${N2=fullPath()}+".pcap"   # *** Enable pcap dump here! ***


