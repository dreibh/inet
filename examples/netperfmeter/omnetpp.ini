# * --------------------------------------------------------------------------
# *
# *     //====//  //===== <===//===>  //====//
# *    //        //          //      //    //    SCTP Optimization Project
# *   //=====   //          //      //====//   ==============================
# *        //  //          //      //           University of Duisburg-Essen
# *  =====//  //=====     //      //
# *
# * --------------------------------------------------------------------------
# *
# *   Copyright (C) 2009-2011 by Thomas Dreibholz
# *
# *   This program is free software: you can redistribute it and/or modify
# *   it under the terms of the GNU General Public License as published by
# *   the Free Software Foundation, either version 3 of the License, or
# *   (at your option) any later version.
# *
# *   This program is distributed in the hope that it will be useful,
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *   GNU General Public License for more details.
# *
# *   You should have received a copy of the GNU General Public License
# *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# *   Contact: dreibh@iem.uni-due.de

[General]
network             = testNetwork
rng-class           = cMersenneTwister
seed-0-mt           = 1
output-scalar-file  = scalars.sca
output-vector-file  = vectors.vec
sim-time-limit      = 0s 3600s 1ms
simtime-scale       = -8   # 10ns time scale

#cmdenv-express-mode = yes     # *** Enable debugging messages here! ***
**.testing          = false   # *** Enable debugging messages here! ***
**.checkQueues      = false   # *** Enable checkOutstandingBytes() calls here! ***

#testNetwork.**.vector-recording           = no
#testNetwork.**.vector-recording-intervals = 0s..0s 3600s


# ===== General Scenario Settings ======================
testNetwork.systems = 5

# ===== Network QoS Settings ===========================
testNetwork.westernCoreRouter.ppp[0].ppp.mtu             = 1500
testNetwork.westernCoreRouter.ppp[0].queueType           = "REDQueue"
testNetwork.westernCoreRouter.ppp[0].queue.wq            = 0.002
testNetwork.westernCoreRouter.ppp[0].queue.minth         = 30
testNetwork.westernCoreRouter.ppp[0].queue.maxth         = 90
testNetwork.westernCoreRouter.ppp[0].queue.maxp          = 0.1
testNetwork.westernCoreRouter.ppp[0].queue.frameCapacity = 100
testNetwork.westernCoreRouter.ppp[0].queue.pkrate        = 8333.333
testNetwork.westernCoreRouter.pppg$o[0].channel.datarate = 1e+07 bps
testNetwork.westernCoreRouter.pppg$o[0].channel.delay    = 10 ms
testNetwork.westernCoreRouter.pppg$o[0].channel.per      = 0
testNetwork.westernCoreRouter.pppg$o[0].channel.ber      = 0
testNetwork.easternCoreRouter.ppp[0].ppp.mtu             = 1500
testNetwork.easternCoreRouter.ppp[0].queueType           = "REDQueue"
testNetwork.easternCoreRouter.ppp[0].queue.wq            = 0.002
testNetwork.easternCoreRouter.ppp[0].queue.minth         = 30
testNetwork.easternCoreRouter.ppp[0].queue.maxth         = 90
testNetwork.easternCoreRouter.ppp[0].queue.maxp          = 0.1
testNetwork.easternCoreRouter.ppp[0].queue.frameCapacity = 100
testNetwork.easternCoreRouter.ppp[0].queue.pkrate        = 8333.333
testNetwork.easternCoreRouter.pppg$o[0].channel.datarate = 1e+07 bps
testNetwork.easternCoreRouter.pppg$o[0].channel.delay    = 10 ms
testNetwork.easternCoreRouter.pppg$o[0].channel.per      = 0
testNetwork.easternCoreRouter.pppg$o[0].channel.ber      = 0

# ----- Common Settings --------------------------------
testNetwork.*.ppp[*].ppp.mtu = 1500

# ===== Application Parameters ===========================
# ----- NetPerfMeter Active Node--------------------------
testNetwork.client*[*].netPerfMeter[*].activeMode      = true
testNetwork.client*[*].netPerfMeter[*].connectTime     = 0.001 s
testNetwork.client*[*].netPerfMeter[*].startTime       = uniform(0.9s,1.1s)
testNetwork.client*[*].netPerfMeter[*].resetTime       = 19 s
testNetwork.client*[*].netPerfMeter[*].stopTime        = 60 s
testNetwork.client*[*].netPerfMeter[*].queueSize       = 5e+06 B
testNetwork.client*[*].netPerfMeter[*].unordered       = 1
testNetwork.client*[*].netPerfMeter[*].unreliable      = 0
testNetwork.client*[*].netPerfMeter[*].outboundStreams = 1
testNetwork.client*[*].netPerfMeter[*].maxMsgSize      = 1452 B
testNetwork.client*[*].netPerfMeter[*].frameRate       = 0 Hz
testNetwork.client*[*].netPerfMeter[*].frameSize       = 1452 B
testNetwork.client*[*].netPerfMeter[*].frameRateString = ""
testNetwork.client*[*].netPerfMeter[*].frameSizeString = ""
testNetwork.client*[*].netPerfMeter[*].onTime          = -1s
testNetwork.client*[*].netPerfMeter[*].offTime         = -1s
testNetwork.client*[*].netPerfMeter[*].maxReconnects   = 0
# testNetwork.client*[*].tcpdump.dumpFile                = ${N1=fullPath()}+".pcap"   # *** Enable pcap dump here! ***

# ----- NetPerfMeter Passive Node ------------------------
testNetwork.server*[*].netPerfMeter[*].activeMode        = false
testNetwork.server*[*].netPerfMeter[*].connectTime       = 0.001 s
testNetwork.server*[*].netPerfMeter[*].startTime         = uniform(0.9s,1.1s)
testNetwork.server*[*].netPerfMeter[*].resetTime         = 19 s
testNetwork.server*[*].netPerfMeter[*].stopTime          = 60 s
testNetwork.server*[*].netPerfMeter[*].queueSize         = 5e+06 B
testNetwork.server*[*].netPerfMeter[*].unordered         = 1
testNetwork.server*[*].netPerfMeter[*].unreliable        = 0
testNetwork.server*[*].netPerfMeter[*].maxInboundStreams = 16
testNetwork.server*[*].netPerfMeter[*].frameRate         = 0 Hz
testNetwork.server*[*].netPerfMeter[*].frameSize         = 0 B
testNetwork.server*[*].netPerfMeter[*].frameRateString   = ""
testNetwork.server*[*].netPerfMeter[*].frameSizeString   = ""
testNetwork.server*[*].netPerfMeter[*].maxMsgSize        = 1452 B
# testNetwork.server*[*].tcpdump.dumpFile                  = ${N2=fullPath()}+".pcap"   # *** Enable pcap dump here! ***

# ----- NetPerfMeter Connections -------------------------
testNetwork.clientMain[*].numNetPerfMeters              = 1
testNetwork.serverMain[*].numNetPerfMeters              = 1
testNetwork.clientMain[*].netPerfMeter[*].localPort     = 20000+${alphaMainClientNetPerfMeterID=ancestorIndex(0)}
testNetwork.clientMain[*].netPerfMeter[*].remotePort    = 8000+${alphaMainClientNetPerfMeterID}
testNetwork.clientMain[*].netPerfMeter[*].remoteAddress = "testNetwork.serverMain[" + string(${alphaMainClientID=ancestorIndex(1)}) + "]/ppp0"
testNetwork.clientMain[*].netPerfMeter[*].primaryPath   = "testNetwork.serverMain[" + string(${alphaMainClientID}) + "]/ppp0"
testNetwork.serverMain[*].netPerfMeter[*].localPort     = 8000+${alphaMainServerNetPerfMeterID=ancestorIndex(0)}
testNetwork.clientMain[*].netPerfMeter[*].protocol      = "TCP"
testNetwork.serverMain[*].netPerfMeter[*].protocol      = "TCP"

# ===== SCTP Parameters ==================================
testNetwork.*.sctp.arwnd                 = 5e+06
testNetwork.*.sctp.hbInterval            = 30 s
testNetwork.*.sctp.enableHeartbeats      = true

# ===== TCP Parameters ===================================
testNetwork.*.tcp.advertisedWindow       = 5e+06
testNetwork.*.tcp.mss                    = 1452
testNetwork.*.tcp.tcpAlgorithmClass      = "TCPReno"
testNetwork.*.tcp.sendQueueClass         = "TCPMsgBasedSendQueue"
testNetwork.*.tcp.receiveQueueClass      = "TCPMsgBasedRcvQueue"
testNetwork.*.tcp.sackSupport            = false
testNetwork.*.tcp.timestampSupport       = true
testNetwork.*.tcp.windowScalingSupport   = true
testNetwork.*.tcp.delayedAcksEnabled     = true
testNetwork.*.tcp.limitedTransmitEnabled = true
testNetwork.*.tcp.increasedIWEnabled     = false

# ===== IP Parameters ====================================
testNetwork.*.ip.procDelay         = 10us
testNetwork.*.routing.procDelay    = 0.2us
testNetwork.*.inputQueue.procDelay = 0.1us
