# ###### Created on Thu Aug 15 09:55:31 2013 ######
# Script version: $Id: simulate-version5.R 1053 2013-05-08 16:16:14Z dreibh $

[General]
network = basic
rng-class           = cMersenneTwister
seed-0-mt           = 2
output-scalar-file  = scalars/scalars.sca
output-vector-file  = vectors/vectors.vec
sim-time-limit      = 0s 18000s 1ms
simtime-scale       = -8   # 10ns time scale


cmdenv-express-mode = true     # *** Enable debugging messages here! ***
**.testing          = false   # *** Enable debugging messages here! ***
**.checkQueues      = false   # *** Enable checkOutstandingBytes() calls here! ***

basic.**.vector-recording = true
basic.**.vector-recording-intervals = 100..120

# ====== Special Settings ==============================

# ===== General Scenario Settings ======================
basic.cores                  = 3
basic.core[0].downlinkTrails = 2
basic.core[1].uplinkTrails   = 2
basic.core[1].downlinkTrails = 1
basic.core[2].uplinkTrails   = 1
# ---- Alpha ----------------------------------------------
basic.core[0].systemsMain                          = 1
basic.core[0].systemsReference                     = 0
basic.core[0].clientReference[*].*.cmtCCVariant = "off"
basic.core[0].serverReference[*].*.cmtCCVariant = "off"
basic.core[0].disjointTrails                       = 1
basic.core[0].bottleneckTrails                     = 1
# ---- Beta -----------------------------------------------
basic.core[1].systemsMain                          = 0
basic.core[1].systemsReference                     = 0
basic.core[1].clientReference[*].*.cmtCCVariant = "off"
basic.core[1].serverReference[*].*.cmtCCVariant = "off"
basic.core[1].disjointTrails                       = 1
basic.core[1].bottleneckTrails                     = 0
# ---- Gamma ----------------------------------------------
basic.core[2].systemsMain                          = 0
basic.core[2].systemsReference                     = 0
basic.core[2].clientReference[*].*.cmtCCVariant = "off"
basic.core[2].serverReference[*].*.cmtCCVariant = "off"
basic.core[2].disjointTrails                       = 1
basic.core[2].bottleneckTrails                     = 0

# ===== Network QoS Settings ===========================
# ----- Alpha Trail ------------------------------------
basic.core[0].westernCoreRouter[*].ppp[0].ppp.mtu             = 1500 B   # NOTE: mtu := max(commonMTU, coreMTU)
basic.core[0].westernCoreRouter[*].ppp[0].queueType           = "REDQueue"
basic.core[0].westernCoreRouter[*].ppp[0].queue.red.wq        = 0.002
basic.core[0].westernCoreRouter[*].ppp[0].queue.red.minths    = "30"
basic.core[0].westernCoreRouter[*].ppp[0].queue.red.maxths    = "90"
basic.core[0].westernCoreRouter[*].ppp[0].queue.red.maxps     = "0.1"
basic.core[0].westernCoreRouter[*].ppp[0].queue.red.pkrates   = "883.333"
basic.core[0].westernCoreRouter[*].ppp[0].queue.frameCapacity = 100
basic.core[0].westernCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
basic.core[0].westernCoreRouter[*].pppg$o[0].channel.delay    = 1 ms
basic.core[0].westernCoreRouter[*].pppg$o[0].channel.per      = 0
basic.core[0].westernCoreRouter[*].pppg$o[0].channel.ber      = 0
basic.core[0].easternCoreRouter[*].ppp[0].ppp.mtu             = 1500 B   # NOTE: mtu := max(commonMTU, coreMTU)
basic.core[0].easternCoreRouter[*].ppp[0].queueType           = "REDQueue"
basic.core[0].easternCoreRouter[*].ppp[0].queue.red.wq        = 0.002
basic.core[0].easternCoreRouter[*].ppp[0].queue.red.minths    = "30"
basic.core[0].easternCoreRouter[*].ppp[0].queue.red.maxths    = "90"
basic.core[0].easternCoreRouter[*].ppp[0].queue.red.maxps     = "0.1"
basic.core[0].easternCoreRouter[*].ppp[0].queue.red.pkrates   = "883.333"
basic.core[0].easternCoreRouter[*].ppp[0].queue.frameCapacity = 100
basic.core[0].easternCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
basic.core[0].easternCoreRouter[*].pppg$o[0].channel.delay    = 1 ms
basic.core[0].easternCoreRouter[*].pppg$o[0].channel.per      = 0
basic.core[0].easternCoreRouter[*].pppg$o[0].channel.ber      = 0
basic.core[0].client*[*].ppp[0].ppp.mtu = 1500 B   # Core
basic.core[0].server*[*].ppp[0].ppp.mtu = 1500 B   # Core
basic.core[0].client*[*].ppp[1].ppp.mtu = 1500 B   # Core
basic.core[0].server*[*].ppp[1].ppp.mtu = 1500 B   # Core

# ----- Beta Trail -------------------------------------
basic.core[1].westernCoreRouter[*].ppp[0].ppp.mtu             = 1500 B   # NOTE: mtu := max(commonMTU, coreMTU)
basic.core[1].westernCoreRouter[*].ppp[0].queueType           = "REDQueue"
basic.core[1].westernCoreRouter[*].ppp[0].queue.red.wq        = 0.002
basic.core[1].westernCoreRouter[*].ppp[0].queue.red.minths    = "30"
basic.core[1].westernCoreRouter[*].ppp[0].queue.red.maxths    = "90"
basic.core[1].westernCoreRouter[*].ppp[0].queue.red.maxps     = "0.1"
basic.core[1].westernCoreRouter[*].ppp[0].queue.red.pkrates   = "883.333"
basic.core[1].westernCoreRouter[*].ppp[0].queue.frameCapacity = 100
basic.core[1].westernCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
basic.core[1].westernCoreRouter[*].pppg$o[0].channel.delay    = 1 ms
basic.core[1].westernCoreRouter[*].pppg$o[0].channel.per      = 0
basic.core[1].westernCoreRouter[*].pppg$o[0].channel.ber      = 0
basic.core[1].easternCoreRouter[*].ppp[0].ppp.mtu             = 1500 B   # NOTE: mtu := max(commonMTU, coreMTU)
basic.core[1].easternCoreRouter[*].ppp[0].queueType           = "REDQueue"
basic.core[1].easternCoreRouter[*].ppp[0].queue.red.wq        = 0.002
basic.core[1].easternCoreRouter[*].ppp[0].queue.red.minths    = "30"
basic.core[1].easternCoreRouter[*].ppp[0].queue.red.maxths    = "90"
basic.core[1].easternCoreRouter[*].ppp[0].queue.red.maxps     = "0.1"
basic.core[1].easternCoreRouter[*].ppp[0].queue.red.pkrates   = "883.333"
basic.core[1].easternCoreRouter[*].ppp[0].queue.frameCapacity = 100
basic.core[1].easternCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
basic.core[1].easternCoreRouter[*].pppg$o[0].channel.delay    = 1 ms
basic.core[1].easternCoreRouter[*].pppg$o[0].channel.per      = 0
basic.core[1].easternCoreRouter[*].pppg$o[0].channel.ber      = 0
basic.core[1].client*[*].ppp[0].ppp.mtu = 1500 B   # Core
basic.core[1].server*[*].ppp[0].ppp.mtu = 1500 B   # Core
basic.core[1].client*[*].ppp[1].ppp.mtu = 1500 B   # Uplink; NOTE: mtu := max(commonMTU, uplinkMTU)
basic.core[1].server*[*].ppp[1].ppp.mtu = 1500 B   # Uplink; NOTE: mtu := max(commonMTU, uplinkMTU)
basic.core[1].client*[*].ppp[2].ppp.mtu = 1500 B   # Uplink; NOTE: mtu := max(commonMTU, uplinkMTU)
basic.core[1].server*[*].ppp[2].ppp.mtu = 1500 B   # Uplink; NOTE: mtu := max(commonMTU, uplinkMTU)

# ----- Gamma Trail ------------------------------------
basic.core[2].westernCoreRouter[*].ppp[0].ppp.mtu             = 1500 B   # NOTE: mtu := max(commonMTU, coreMTU)
basic.core[2].westernCoreRouter[*].ppp[0].queueType           = "REDQueue"
basic.core[2].westernCoreRouter[*].ppp[0].queue.red.wq        = 0.002
basic.core[2].westernCoreRouter[*].ppp[0].queue.red.minths    = "30"
basic.core[2].westernCoreRouter[*].ppp[0].queue.red.maxths    = "90"
basic.core[2].westernCoreRouter[*].ppp[0].queue.red.maxps     = "0.1"
basic.core[2].westernCoreRouter[*].ppp[0].queue.red.pkrates   = "883.333"
basic.core[2].westernCoreRouter[*].ppp[0].queue.frameCapacity = 100
basic.core[2].westernCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
basic.core[2].westernCoreRouter[*].pppg$o[0].channel.delay    = 1 ms
basic.core[2].westernCoreRouter[*].pppg$o[0].channel.per      = 0
basic.core[2].westernCoreRouter[*].pppg$o[0].channel.ber      = 0
basic.core[2].easternCoreRouter[*].ppp[0].ppp.mtu             = 1500 B   # NOTE: mtu := max(commonMTU, coreMTU)
basic.core[2].easternCoreRouter[*].ppp[0].queueType           = "REDQueue"
basic.core[2].easternCoreRouter[*].ppp[0].queue.red.wq        = 0.002
basic.core[2].easternCoreRouter[*].ppp[0].queue.red.minths    = "30"
basic.core[2].easternCoreRouter[*].ppp[0].queue.red.maxths    = "90"
basic.core[2].easternCoreRouter[*].ppp[0].queue.red.maxps     = "0.1"
basic.core[2].easternCoreRouter[*].ppp[0].queue.red.pkrates   = "883.333"
basic.core[2].easternCoreRouter[*].ppp[0].queue.frameCapacity = 100
basic.core[2].easternCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
basic.core[2].easternCoreRouter[*].pppg$o[0].channel.delay    = 1 ms
basic.core[2].easternCoreRouter[*].pppg$o[0].channel.per      = 0
basic.core[2].easternCoreRouter[*].pppg$o[0].channel.ber      = 0
basic.core[2].client*[*].ppp[0].ppp.mtu = 1500 B   # Core
basic.core[2].server*[*].ppp[0].ppp.mtu = 1500 B   # Core
basic.core[2].client*[*].ppp[1].ppp.mtu = 1500 B   # Uplink; NOTE: mtu := max(commonMTU, uplinkMTU)
basic.core[2].server*[*].ppp[1].ppp.mtu = 1500 B   # Uplink; NOTE: mtu := max(commonMTU, uplinkMTU)

# ===== Background Traffic ===============================

# ----- Common Settings --------------------------------
basic.core[*].*[*].ppp[*].ppp.mtu = 1500 B

# ===== Application Parameters ===========================
# ----- NetPerfMeter Active Node--------------------------
basic.core[*].client*[*].netPerfMeterApp[*].activeMode      = true
basic.core[*].client*[*].netPerfMeterApp[*].connectTime     = 0.001 s
basic.core[*].client*[*].netPerfMeterApp[*].startTime       = uniform(50.9s,55.1s)
basic.core[*].client*[*].netPerfMeterApp[*].resetTime       = 80 s
basic.core[*].client*[*].netPerfMeterApp[*].stopTime        = 190s
basic.core[*].client*[*].netPerfMeterApp[*].queueSize       = 5e+07 B
basic.core[*].client*[*].netPerfMeterApp[*].unordered       = 0
basic.core[*].client*[*].netPerfMeterApp[*].unreliable      = 0
basic.core[*].client*[*].netPerfMeterApp[*].outboundStreams = 1
basic.core[*].client*[*].netPerfMeterApp[*].decoupleSaturatedStreams = false
basic.core[*].client*[*].netPerfMeterApp[*].maxMsgSize      = 1424 B
basic.core[*].client*[*].netPerfMeterApp[*].frameRate         = 0 Hz
basic.core[*].client*[*].netPerfMeterApp[*].frameSize         = 1424 B
basic.core[*].client*[*].netPerfMeterApp[*].frameRateString   = ""
basic.core[*].client*[*].netPerfMeterApp[*].frameSizeString   = ""
basic.core[*].client*[*].netPerfMeterApp[*].onTime            = -1s
basic.core[*].client*[*].netPerfMeterApp[*].offTime           = -1s
basic.core[*].client*[*].netPerfMeterApp[*].maxReconnects     = 0
basic.core[*].client*[*].numPcapRecorders                     = 0   # *** Enable pcap dump here! ***
basic.core[*].client*[*].pcapRecorder[0].pcapFile             = ${N1=fullPath()}+".pcap"   # *** Enable pcap dump here! ***

# ----- NetPerfMeter Passive Node ------------------------
basic.core[*].server*[*].netPerfMeterApp[*].activeMode        = false
basic.core[*].server*[*].netPerfMeterApp[*].connectTime       = 0.001 s
basic.core[*].server*[*].netPerfMeterApp[*].startTime         = uniform(50.9s,55.1s)
basic.core[*].server*[*].netPerfMeterApp[*].resetTime         = 80 s
basic.core[*].server*[*].netPerfMeterApp[*].stopTime          = 300 s
basic.core[*].server*[*].netPerfMeterApp[*].queueSize         = 5e+07 B
basic.core[*].server*[*].netPerfMeterApp[*].unordered         = 0
basic.core[*].server*[*].netPerfMeterApp[*].unreliable        = 0
basic.core[*].server*[*].netPerfMeterApp[*].maxInboundStreams = 16
basic.core[*].server*[*].netPerfMeterApp[*].decoupleSaturatedStreams = false
basic.core[*].server*[*].netPerfMeterApp[*].frameRate         = 0 Hz
basic.core[*].server*[*].netPerfMeterApp[*].frameSize         = 0 B
basic.core[*].server*[*].netPerfMeterApp[*].frameRateString   = ""
basic.core[*].server*[*].netPerfMeterApp[*].frameSizeString   = ""
basic.core[*].server*[*].netPerfMeterApp[*].maxMsgSize        = 1424 B
basic.core[*].server*[*].numPcapRecorders                     = 0   # *** Enable pcap dump here! ***
basic.core[*].server*[*].pcapRecorder[0].pcapFile             = ${N2=fullPath()}+".pcap"

# ----- NetPerfMeter Connections -------------------------
basic.core[0].clientReference[*].numNetPerfMeterApps  = 1
basic.core[0].serverReference[*].numNetPerfMeterApps  = 1
basic.core[0].clientMain[*].numNetPerfMeterApps       = 1
basic.core[0].serverMain[*].numNetPerfMeterApps       = 1
basic.core[1].clientReference[*].numNetPerfMeterApps  = 1
basic.core[1].serverReference[*].numNetPerfMeterApps  = 1
basic.core[1].clientMain[*].numNetPerfMeterApps       = 1
basic.core[1].serverMain[*].numNetPerfMeterApps       = 1
basic.core[2].clientReference[*].numNetPerfMeterApps  = 1
basic.core[2].serverReference[*].numNetPerfMeterApps  = 1
basic.core[2].clientMain[*].numNetPerfMeterApps       = 1
basic.core[2].serverMain[*].numNetPerfMeterApps       = 1
basic.core[0].clientReference[*].netPerfMeterApp[*].localPort     = 20000+${alphaReferenceClientNetPerfMeterID=ancestorIndex(0)}
basic.core[0].clientReference[*].netPerfMeterApp[*].remotePort    = 8000+${alphaReferenceClientNetPerfMeterID}
basic.core[0].clientReference[*].netPerfMeterApp[*].remoteAddress = "basic.core[0].serverReference[" + string(${alphaReferenceClientID=ancestorIndex(1)}) + "]%ppp0"
basic.core[0].clientReference[*].netPerfMeterApp[*].primaryPath   = "basic.core[0].serverReference[" + string(${alphaReferenceClientID}) + "]%ppp0"
basic.core[0].serverReference[*].netPerfMeterApp[*].localPort     = 8000+${alphaReferenceServerNetPerfMeterID=ancestorIndex(0)}
basic.core[0].clientReference[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[0].serverReference[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[0].clientMain[*].netPerfMeterApp[*].localPort     = 20000+${alphaMainClientNetPerfMeterID=ancestorIndex(0)}
basic.core[0].clientMain[*].netPerfMeterApp[*].remotePort    = 8000+${alphaMainClientNetPerfMeterID}
basic.core[0].clientMain[*].netPerfMeterApp[*].remoteAddress = "basic.core[0].serverMain[" + string(${alphaMainClientID=ancestorIndex(1)}) + "]%ppp0"
basic.core[0].clientMain[*].netPerfMeterApp[*].primaryPath   = "basic.core[0].serverMain[" + string(${alphaMainClientID}) + "]%ppp0"
basic.core[0].serverMain[*].netPerfMeterApp[*].localPort     = 8000+${alphaMainServerNetPerfMeterID=ancestorIndex(0)}
basic.core[0].clientMain[*].netPerfMeterApp[*].protocol      = "TCP"
basic.core[0].serverMain[*].netPerfMeterApp[*].protocol      = "TCP"
basic.core[1].clientReference[*].netPerfMeterApp[*].localPort     = 20000+${betaReferenceClientNetPerfMeterID=ancestorIndex(0)}
basic.core[1].clientReference[*].netPerfMeterApp[*].remotePort    = 8000+${betaReferenceClientNetPerfMeterID}
basic.core[1].clientReference[*].netPerfMeterApp[*].remoteAddress = "basic.core[1].serverReference[" + string(${betaReferenceClientID=ancestorIndex(1)}) + "]%ppp0"
basic.core[1].clientReference[*].netPerfMeterApp[*].primaryPath   = "basic.core[1].serverReference[" + string(${betaReferenceClientID}) + "]%ppp0"
basic.core[1].serverReference[*].netPerfMeterApp[*].localPort     = 8000+${betaReferenceServerNetPerfMeterID=ancestorIndex(0)}
basic.core[1].clientReference[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[1].serverReference[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[1].clientMain[*].netPerfMeterApp[*].localPort     = 20000+${betaMainClientNetPerfMeterID=ancestorIndex(0)}
basic.core[1].clientMain[*].netPerfMeterApp[*].remotePort    = 8000+${betaMainClientNetPerfMeterID}
basic.core[1].clientMain[*].netPerfMeterApp[*].remoteAddress = "basic.core[1].serverMain[" + string(${betaMainClientID=ancestorIndex(1)}) + "]%ppp0"
basic.core[1].clientMain[*].netPerfMeterApp[*].primaryPath   = "basic.core[1].serverMain[" + string(${betaMainClientID}) + "]%ppp0"
basic.core[1].serverMain[*].netPerfMeterApp[*].localPort     = 8000+${betaMainServerNetPerfMeterID=ancestorIndex(0)}
basic.core[1].clientMain[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[1].serverMain[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[2].clientReference[*].netPerfMeterApp[*].localPort     = 20000+${gammaReferenceClientNetPerfMeterID=ancestorIndex(0)}
basic.core[2].clientReference[*].netPerfMeterApp[*].remotePort    = 8000+${gammaReferenceClientNetPerfMeterID}
basic.core[2].clientReference[*].netPerfMeterApp[*].remoteAddress = "basic.core[2].serverReference[" + string(${gammaReferenceClientID=ancestorIndex(1)}) + "]%ppp0"
basic.core[2].clientReference[*].netPerfMeterApp[*].primaryPath   = "basic.core[2].serverReference[" + string(${gammaReferenceClientID}) + "]%ppp0"
basic.core[2].serverReference[*].netPerfMeterApp[*].localPort     = 8000+${gammaReferenceServerNetPerfMeterID=ancestorIndex(0)}
basic.core[2].clientReference[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[2].serverReference[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[2].clientMain[*].netPerfMeterApp[*].localPort     = 20000+${gammaMainClientNetPerfMeterID=ancestorIndex(0)}
basic.core[2].clientMain[*].netPerfMeterApp[*].remotePort    = 8000+${gammaMainClientNetPerfMeterID}
basic.core[2].clientMain[*].netPerfMeterApp[*].remoteAddress = "basic.core[2].serverMain[" + string(${gammaMainClientID=ancestorIndex(1)}) + "]%ppp0"
basic.core[2].clientMain[*].netPerfMeterApp[*].primaryPath   = "basic.core[2].serverMain[" + string(${gammaMainClientID}) + "]%ppp0"
basic.core[2].serverMain[*].netPerfMeterApp[*].localPort     = 8000+${gammaMainServerNetPerfMeterID=ancestorIndex(0)}
basic.core[2].clientMain[*].netPerfMeterApp[*].protocol      = "SCTP"
basic.core[2].serverMain[*].netPerfMeterApp[*].protocol      = "SCTP"

basic.core[*].*Main*[*].*.cmtCCVariant          = "cmt"
basic.core[*].*Reference*[*].*.cmtCCVariant     = "off"

# ===== SCTP Parameters ==================================
basic.core[*].*[*].sctp.arwnd                       = 5e+07
basic.core[*].*[*].sctp.hbInterval                  = 30 s
basic.core[*].*[*].sctp.enableHeartbeats            = true
basic.core[*].*[*].sctp.sendHeartbeatsOnActivePaths = false
basic.core[*].*[*].sctp.cmtSendAllVariant           = "smallestLastTransmission"
basic.core[*].*[*].sctp.cmtRetransmissionVariant    = "normal"
basic.core[*].*[*].sctp.cmtBufferSplitVariant       = "none"
basic.core[*].*[*].sctp.cmtBufferSplittingUsesOSB   = false
basic.core[*].*[*].sctp.cmtCUCVariant               = "pseudoCumAckV2"
basic.core[*].*[*].sctp.cmtUseSFR                   = true
basic.core[*].*[*].sctp.cmtUseDAC                   = true
basic.core[*].*[*].sctp.cmtUseFRC                   = true
basic.core[*].*[*].sctp.cmtCCPathGroups             = ""
basic.core[*].*[*].sctp.rpPathBlocking              = false
basic.core[*].*[*].sctp.rpScaleBlockingTimeout      = false
basic.core[*].*[*].sctp.rpMinCwnd                   = 1
basic.core[*].*[*].sctp.cmtSackPath                 = "standard"
basic.core[*].*[*].sctp.nrSack                      = true
basic.core[*].*[*].sctp.disableReneging             = false
basic.core[*].*[*].sctp.gapReportLimit              = 1e+08
basic.core[*].*[*].sctp.gapListOptimizationVariant  = "none"
basic.core[*].*[*].sctp.smartOverfullSACKHandling   = true
basic.core[*].*[*].sctp.cmtUseOOPG                  = false
basic.core[*].*[*].sctp.strictCwndBooking           = false
basic.core[*].*[*].sctp.osbWithHeader               = false
basic.core[*].*[*].sctp.sackNow                     = false
basic.core[*].*[*].sctp.packetDrop                  = false
basic.core[*].*[*].sctp.highSpeedCC                 = false
basic.core[*].*[*].sctp.maxBurst                    = 4
basic.core[*].*[*].sctp.maxBurstVariant             = "useItOrLoseIt"
basic.core[*].*[*].sctp.initialWindow               = 0
basic.core[*].*[*].sctp.cmtSmartT3Reset             = true
basic.core[*].*[*].sctp.cmtSmartReneging            = false
basic.core[*].*[*].sctp.cmtSmartFastRTX             = true
basic.core[*].*[*].sctp.cmtSlowPathRTTUpdate        = false
basic.core[*].*[*].sctp.cmtChunkReschedulingVariant   = "none"
basic.core[*].*[*].sctp.cmtChunkReschedulingThreshold = 0.5
basic.core[*].*[*].sctp.cmtMovedChunksReduceCwnd    = true
basic.core[*].*[*].sctp.movedChunkFastRTXFactor     = 2
basic.core[*].*[*].sctp.streamsToPaths              = ""
# ===== SCTP-ledbat spParameters ==================================
basic.core[*].client*[*].*.ledbat_target_numerator       = 150
basic.core[*].server*[*].*.ledbat_target_numerator       = 150
basic.core[*].client*[*].*.ledbat_target_denominator     = 1000
basic.core[*].server*[*].*.ledbat_target_denominator     = 1000
basic.core[*].client*[*].*.ledbat_GAIN_numerator       = 150
basic.core[*].server*[*].*.ledbat_target_numerator       = 1000
basic.core[*].client*[*].*.ledbat_GAIN_denominator     = 1000
basic.core[*].server*[*].*.ledbat_GAIN_denominator     = 1000
# ===== Multipath CC Parameters ==================================
basic.core[*].*Main*[*].*.cmtCCVariant          = "cmt"
basic.core[*].*Reference*[*].*.cmtCCVariant     = "off"
basic.core[*].*[*].sctp.RTXMethod                   = 0   # "once"
basic.core[*].*[*].sctp.ssModule                    = 0   # "roundRobin"
basic.core[*].*[*].sctp.allowQoSTracking            = false
basic.core[*].*[*].sctp.qosTrackingInterval         = 1 s

# ===== TCP Parameters ===================================
basic.core[*].*[*].tcp.advertisedWindow       = 5e+07
basic.core[*].*[*].tcp.mss                    = 1456
basic.core[*].*[*].tcp.tcpAlgorithmClass      = "TCPNewReno"
basic.core[*].*[*].tcp.sackSupport            = true
basic.core[*].*[*].tcp.timestampSupport       = true
basic.core[*].*[*].tcp.windowScalingSupport   = true
basic.core[*].*[*].tcp.delayedAcksEnabled     = false
basic.core[*].*[*].tcp.limitedTransmitEnabled = true
basic.core[*].*[*].tcp.increasedIWEnabled     = false

# ===== IP Parameters ====================================
basic.core[*].*[*].ip.procDelay         = 10us
basic.core[*].*[*].routing.procDelay    = 0.2us
basic.core[*].*[*].inputQueue.procDelay = 0.1us

# ===== Test Parameters ==================================
basic.core[*].*[*].sctp.testValue0   = 0
basic.core[*].*[*].sctp.testValue1   = 0
basic.core[*].*[*].sctp.testValue2   = 0
basic.core[*].*[*].sctp.testValue3   = 0
basic.core[*].*[*].sctp.testValue4   = 0
basic.core[*].*[*].sctp.testString0  = ""
basic.core[*].*[*].sctp.testString1  = ""
basic.core[*].*[*].sctp.testString2  = ""
basic.core[*].*[*].sctp.testString3  = ""
basic.core[*].*[*].sctp.testString4  = ""
**.scenarioManager.script = xmldoc("experiments/Basic_CC/MPTCP/MPTCP.xml")
